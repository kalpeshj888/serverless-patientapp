service:
  name: serverless-patient-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-canary-deployments

tracing:
  lambda: true
  apiGateway: true


provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PATIENTS_TABLE: Patients-${self:provider.stage}
    REQUESTS_TABLE: PatientsRequests-${self:provider.stage}
    REQUEST_ID_INDEX: RequestIdIndex
    REQUESTFILE_S3_BUCKET: patientapp-kalpeshj777-requestfile-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    #- Effect: Allow
    #  Action:
    #    - dynamodb:Scan
    #    - dynamodb:PutItem
    #    - dynamodb:GetItem
    #  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PATIENTS_TABLE}
custom:
  topicName: requestsTopic-${self:provider.stage}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetPatients:
    handler: src/lambda/http/getPatients.handler
    events:
      - http:
          method: get
          path: patients
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PATIENTS_TABLE}
   
  CreatePatient:
    handler: src/lambda/http/createPatient.handler
    events:
      - http:
         method: post
         path: patients
         cors: true
         authorizer: Auth
         reqValidatorName: RequestBodyValidator
    #deploymentSettings:
      #type: Linear10PercentEvery1Minute
      #alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PATIENTS_TABLE}

  DeletePatient:
    handler: src/lambda/http/deletePatient.handler
    events:
      - http:
         method: delete
         path: patients/{patientId}
         cors: true
         authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PATIENTS_TABLE}  

  UpdatePatient:
    handler: src/lambda/http/updatePatient.handler
    events:
      - http:
          method: patch
          path: patients/{patientId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PATIENTS_TABLE}

  GetRequests:
    handler: src/lambda/http/getRequests.handler
    events:
      - http:
          method: get
          path: patients/{patientId}/requests
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PATIENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REQUESTS_TABLE}

  CreateRequest:
    handler: src/lambda/http/createRequest.handler
    events:
      - http:
         method: post
         path: patients/{patientId}/requests
         cors: true
         authorizer: Auth
         reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REQUESTS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.REQUESTFILE_S3_BUCKET}/*

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    PatientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: patientId
            AttributeType: S
        KeySchema:
          - AttributeName: patientId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PATIENTS_TABLE}
    
    RequestsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: patientId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: patientId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REQUESTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.REQUEST_ID_INDEX}
            KeySchema:
            - AttributeName: requestId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
              
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.REQUESTFILE_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref RequestsTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
              
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Deny
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.REQUESTFILE_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref RequestsTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.REQUESTFILE_S3_BUCKET}
        Topics:
          - !Ref RequestsTopic


    RequestsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Request bucket topic
        TopicName: ${self:custom.topicName}